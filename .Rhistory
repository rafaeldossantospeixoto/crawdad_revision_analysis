ggplot2::geom_line(ggplot2::aes(x = distances, y = proportions,
color = celltypes)) +
ggplot2::scale_color_manual(values = grDevices::rainbow(length(unique(cells$celltypes)) - 1)) +
ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(linewidth = 2))) +
ggplot2::theme_minimal()
}
## Podoplanin
reference <- 'C'
distances <- c(25, 50, 75, 100, 150, 200, 300, 400, 500)
it <- Sys.time()
plt_distances <- compareNeighborhoods(cells, reference, distances)
Sys.time() - it
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = pkhl[,c("x", "y")], celltypes = pkhl$celltypes)
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = df[,c("x", "y")], celltypes = df$celltype)
## Podoplanin
reference <- 'C'
distances <- c(25, 50, 75, 100, 150, 200, 300, 400, 500)
it <- Sys.time()
plt_distances <- compareNeighborhoods(cells, reference, distances)
Sys.time() - it
## Time difference of 7.18728 mins
plt_distances
gc()
library(crawdad)
library(tidyverse)
# Load data ---------------------------------------------------------------
df <- read.csv('simulating_data/symmetries/symmetry_0.csv', row.names = 1)
dim(df)
head(df)
df %>%
ggplot() +
geom_point(aes(x, y, color = celltype)) +
scale_color_manual(values = rainbow(3))
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = df[,c("x", "y")], celltypes = df$celltype)
list.files()
list.files('simulating_data/symmetries/')
lfs <- list.files('simulating_data/symmetries/')
lfs <- str_extract_all(lfs, "\\b\\w+\\.csv\\b")
lfs
lfs <- unlist(str_extract_all(lfs, "\\b\\w+\\.csv\\b"))
lfs <- list.files('simulating_data/symmetries/')
lfs <- unlist(str_extract_all(lfs, "\\b\\w+\\.csv\\b"))
lfs
teest <- list()
teest <- append(1)
teest <- append(teest, 1)
teest <- append(teest, 3)
teest
library(crawdad)
library(tidyverse)
# Get filenames -----------------------------------------------------------
lfs <- list.files('simulating_data/symmetries/')
lfs <- unlist(str_extract_all(lfs, "\\b\\w+\\.csv\\b"))
ncores <- 7
scales <- c(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000)
dats <- list()
for (file_name in lfs) {
df <- read.csv(paste0('simulating_data/symmetries/', file_name),
row.names = 1)
cells <- crawdad::toSF(pos = df[,c("x", "y")], celltypes = df$celltype)
shuffle.list <- crawdad:::makeShuffledCells(cells,
scales = scales,
perms = 3,
ncores = ncores,
seed = 1,
verbose = TRUE)
results <- crawdad::findTrends(cells,
dist = 50,
shuffle.list = shuffle.list,
ncores = ncores,
verbose = TRUE,
returnMeans = FALSE)
dat <- crawdad::meltResultsList(results, withPerms = TRUE)
dats <- append(dats, dat)
}
## Time was 38.81 mins
saveRDS(results, 'simulating_data/symmetries/results/dats.RDS')
dat <- dats[[1]]
## calculate the zscore for the multiple-test correction
zsig <- correctZBonferroni(dat)
length(lfs)
names(dat)
names(dats)
dats <- list()
for (file_name in lfs) {
df <- read.csv(paste0('simulating_data/symmetries/', file_name),
row.names = 1)
cells <- crawdad::toSF(pos = df[,c("x", "y")], celltypes = df$celltype)
shuffle.list <- crawdad:::makeShuffledCells(cells,
scales = scales,
perms = 3,
ncores = ncores,
seed = 1,
verbose = TRUE)
results <- crawdad::findTrends(cells,
dist = 50,
shuffle.list = shuffle.list,
ncores = ncores,
verbose = TRUE,
returnMeans = FALSE)
dat <- crawdad::meltResultsList(results, withPerms = TRUE)
dats[[file_name]] <- dat
}
## Time was 38.81 mins
saveRDS(results, 'simulating_data/symmetries/results/dats.RDS')
dat <- dats[[1]]
## calculate the zscore for the multiple-test correction
zsig <- correctZBonferroni(dat)
## summary visualization
vizColocDotplot(dat, zsig.thresh = zsig, zscore.limit = 2*zsig) +
theme(axis.text.x = element_text(angle = 35, h = 0))
dat <- dats[[2]]
## calculate the zscore for the multiple-test correction
zsig <- correctZBonferroni(dat)
## summary visualization
vizColocDotplot(dat, zsig.thresh = zsig, zscore.limit = 2*zsig) +
theme(axis.text.x = element_text(angle = 35, h = 0))
dat <- dats[[2]]
## calculate the zscore for the multiple-test correction
zsig <- correctZBonferroni(dat)
## summary visualization
vizColocDotplot(dat, zsig.thresh = zsig, zscore.limit = 2*zsig) +
theme(axis.text.x = element_text(angle = 35, h = 0))
## Time was 38.81 mins
saveRDS(dats, 'simulating_data/symmetries/results/dats.RDS')
file <- lfs[1]
file_name <- lfs[1]
df <- read.csv(paste0('simulating_data/symmetries/', file_name),
row.names = 1)
df %>%
ggplot() +
geom_point(aes(x, y, color = celltype)) +
scale_color_manual(values = rainbow(3))
## Time was 38.81 mins
saveRDS(dats, 'simulating_data/symmetries/results/dats.RDS')
?na.omit
library(crawdad)
library(tidyverse)
ncores <- 7
data(sim)
crawdad::vizAllClusters(cells = sim, coms = sim$celltypes,
title = "sim", axisAdj = 1, s = 6, a = 0.5) +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=2), ncol = 1))
cells <- toSF(pos = sim[, c('x', 'y')], celltypes = sim$celltypes)
plt <- crawdad::vizAllClusters(cells = cells,
coms = cells$celltypes,
axisAdj = 1, s = 6, a = 0.5) +
guides(color = "none") +
theme(axis.line = element_blank(),       # Remove axis lines
axis.text = element_blank(),       # Remove axis text
axis.ticks = element_blank(),      # Remove axis ticks
axis.title = element_blank(),      # Remove axis titles
panel.background = element_blank(), # Remove panel background,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA))
plt
library(crawdad)
library(tidyverse)
ncores <- 7
data(sim)
crawdad::vizAllClusters(cells = sim, coms = sim$celltypes,
title = "sim", axisAdj = 1, s = 6, a = 0.5) +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=2), ncol = 1))
cells <- toSF(pos = sim[, c('x', 'y')], celltypes = sim$celltypes)
plt <- crawdad::vizAllClusters(cells = cells,
coms = cells$celltypes,
axisAdj = 1, s = 6, a = 0.5) +
guides(color = "none") +
theme(axis.line = element_blank(),       # Remove axis lines
axis.text = element_blank(),       # Remove axis text
axis.ticks = element_blank(),      # Remove axis ticks
axis.title = element_blank(),      # Remove axis titles
panel.background = element_blank(), # Remove panel background,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA))
plt
pdf("method/original.pdf")
# CRAWDAD -----------------------------------------------------------------
library(crawdad)
library(tidyverse)
ncores <- 7
data(sim)
crawdad::vizAllClusters(cells = sim, coms = sim$celltypes,
title = "sim", axisAdj = 1, s = 6, a = 0.5) +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=2), ncol = 1))
cells <- toSF(pos = sim[, c('x', 'y')], celltypes = sim$celltypes)
plt <- crawdad::vizAllClusters(cells = cells,
coms = cells$celltypes,
axisAdj = 1, s = 6, a = 0.5) +
guides(color = "none") +
theme(axis.line = element_blank(),       # Remove axis lines
axis.text = element_blank(),       # Remove axis text
axis.ticks = element_blank(),      # Remove axis ticks
axis.title = element_blank(),      # Remove axis titles
panel.background = element_blank(), # Remove panel background,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA))
plt
# pdf("method/original.pdf")
# plt
dev.off()
## generate background
shuffle.list <- crawdad::makeShuffledCells(cells,
scales = seq(100, 1000, by=50),
perms = 1,
ncores = ncores,
seed = 1,
verbose = TRUE)
## find trends, passing background as parameter
results <- crawdad::findTrends(cells,
dist = 100,
shuffle.list = shuffle.list,
ncores = ncores,
verbose = TRUE,
returnMeans = FALSE)
## convert results to data.frame
dat <- crawdad::meltResultsList(results, withPerms = T)
## multiple-test correction
ntests <- length(unique(dat$reference)) * length(unique(dat$reference))
psig <- 0.05/ntests
zsig <- round(qnorm(psig/2, lower.tail = F), 2)
dat_filter <- dat %>%
filter(reference == 'B') %>%
filter(neighbor == 'D')
vizTrends(dat_filter, lines = T, withPerms = T, sig.thresh = zsig)
## list hierarchy is: shuffle.list$resolution$permutation
shuff <- shuffle.list$`500`$`1`
head(shuff)
## for visualization purposes, we can also add the shuffled labels to a new column in `cells`
cells$shuff_200 <- shuffle.list$`500`$`1`
cells
## shuffling grid
grid <- sf::st_make_grid(cells, cellsize = 500)
## get the coordinates of the centers of the grid tiles to add the tile IDs
grid_coords_centroids <- as.data.frame(sf::st_coordinates(sf::st_centroid(grid)))
grid_coords_centroids$name <- as.character(rownames(grid_coords_centroids))
plt <- crawdad::vizAllClusters(cells = cells,
coms = cells$celltypes,
axisAdj = 1, s = 6, a = 0.5) +
# ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=1), ncol = 1)) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids, ggplot2::aes(X, Y, label = name)) +
guides(color = "none") +
theme(axis.line = element_blank(),       # Remove axis lines
axis.text = element_blank(),       # Remove axis text
axis.ticks = element_blank(),      # Remove axis ticks
axis.title = element_blank(),      # Remove axis titles
panel.background = element_blank(), # Remove panel background,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA))
plt
?vizAllClusters
library(crawdad)
library(tidyverse)
ncores <- 7
data(sim)
cells <- toSF(pos = sim[, c('x', 'y')], celltypes = sim$celltypes)
class(cells)
#' @return plot
#'
#' @examples
#' \dontrun{
#' data(slide)
#' cells <- crawdad::toSF(pos = slide[,c("x", "y")], celltypes = slide$celltypes)
#' vizAllClusters(cells)
#' }
#'
#' @export
vizGrids <- function(cells, gridSize, ofInterest = NULL,
pointSize = 1, alpha = 0.5){
crawdad::vizAllClusters(cells = cells, ofInterest,
pointSize, alpha) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids, ggplot2::aes(X, Y, label = name)) +
guides(color = "none") +
theme(axis.line = element_blank(),       # Remove axis lines
axis.text = element_blank(),       # Remove axis text
axis.ticks = element_blank(),      # Remove axis ticks
axis.title = element_blank(),      # Remove axis titles
panel.background = element_blank(), # Remove panel background,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA))
}
#' @return plot
#'
#' @examples
#' \dontrun{
#' data(slide)
#' cells <- crawdad::toSF(pos = slide[,c("x", "y")], celltypes = slide$celltypes)
#' vizAllClusters(cells)
#' }
#'
#' @export
vizGrids <- function(cells, gridSize, ofInterest = NULL,
pointSize = 1, alpha = 0.5){
## shuffling grid
grid <- sf::st_make_grid(cells, cellsize = gridSize)
## get the coordinates of the centers of the grid tiles to add the tile IDs
grid_coords_centroids <- as.data.frame(sf::st_coordinates(sf::st_centroid(grid)))
grid_coords_centroids$name <- as.character(rownames(grid_coords_centroids))
## create plot
crawdad::vizAllClusters(cells = cells, ofInterest,
pointSize, alpha) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids,
ggplot2::aes(X, Y, label = name)) +
guides(color = "none") +
theme(axis.line = element_blank(),       # Remove axis lines
axis.text = element_blank(),       # Remove axis text
axis.ticks = element_blank(),      # Remove axis ticks
axis.title = element_blank(),      # Remove axis titles
panel.background = element_blank(), # Remove panel background,
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_rect(color = "black", size = 1, fill = NA))
}
## load the spleen data of the pkhl sample
data('pkhl')
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = pkhl[,c("x", "y")], celltypes = pkhl$celltypes)
## plot
vizGrids(cells, gridSize = 500)
#' @return plot
#'
#' @examples
#' \dontrun{
#' data(slide)
#' cells <- crawdad::toSF(pos = slide[,c("x", "y")], celltypes = slide$celltypes)
#' vizAllClusters(cells)
#' }
#'
#' @export
vizGrids <- function(cells, gridSize, ofInterest = NULL,
pointSize = 1, alpha = 0.5){
## shuffling grid
grid <- sf::st_make_grid(cells, cellsize = gridSize)
## get the coordinates of the centers of the grid tiles to add the tile IDs
grid_coords_centroids <- as.data.frame(sf::st_coordinates(sf::st_centroid(grid)))
grid_coords_centroids$name <- as.character(rownames(grid_coords_centroids))
## create plot
crawdad::vizClusters(cells = cells, ofInterest,
pointSize, alpha) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids,
ggplot2::aes(X, Y, label = name)) +
ggplot2::guides(color = "none") +
ggplot2::theme(axis.line = ggplot2::element_blank(),       # Remove axis lines
axis.text = ggplot2::element_blank(),       # Remove axis text
axis.ticks = ggplot2::element_blank(),      # Remove axis ticks
axis.title = ggplot2::element_blank(),      # Remove axis titles
panel.background = ggplot2::element_blank(), # Remove panel background,
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.border = ggplot2::element_rect(color = "black", size = 1, fill = NA))
}
## load the spleen data of the pkhl sample
data('pkhl')
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = pkhl[,c("x", "y")], celltypes = pkhl$celltypes)
## plot
vizGrids(cells, gridSize = 500)
#' Visualize grids and clusters
#'
#' @description Uses the cells sf object and size of grid to visualize the grids
#' and clusters.
#'
#' @param cells sf object; spatial (x and y) coordinates and celltypes column
#' @param gridSize numeric; size of the grid to plot
#' @param ofInterest character vector; a vector of specific clusters to visualize
#' @param pointSize numeric; size of points
#' @param alpha numeric; transparency of points
#'
#' @return plot
#'
#' @examples
#' \dontrun{
#' data(slide)
#' cells <- crawdad::toSF(pos = slide[,c("x", "y")], celltypes = slide$celltypes)
#' vizAllClusters(cells)
#' }
#'
#' @export
vizGrids <- function(cells, gridSize, ofInterest = NULL,
pointSize = 1, alpha = 0.5){
## shuffling grid
grid <- sf::st_make_grid(cells, cellsize = gridSize)
## get the coordinates of the centers of the grid tiles to add the tile IDs
grid_coords_centroids <- as.data.frame(sf::st_coordinates(sf::st_centroid(grid)))
grid_coords_centroids$name <- as.character(rownames(grid_coords_centroids))
## create plot
crawdad::vizClusters(cells = cells, ofInterest,
pointSize, alpha) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids,
ggplot2::aes(X, Y, label = name)) +
ggplot2::guides(color = "none") +
ggplot2::theme(axis.line = ggplot2::element_blank(),       # Remove axis lines
axis.text = ggplot2::element_blank(),       # Remove axis text
axis.ticks = ggplot2::element_blank(),      # Remove axis ticks
axis.title = ggplot2::element_blank(),      # Remove axis titles
panel.background = ggplot2::element_blank(), # Remove panel background,
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.border = ggplot2::element_rect(color = "black", size = 1, fill = NA))
}
library(crawdad)
## load the spleen data of the pkhl sample
data('pkhl')
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = pkhl[,c("x", "y")], celltypes = pkhl$celltypes)
## plot
vizGrids(cells, gridSize = 500)
#' @return plot
#'
#' @examples
#' \dontrun{
#' data(slide)
#' cells <- crawdad::toSF(pos = slide[,c("x", "y")], celltypes = slide$celltypes)
#' vizAllClusters(cells)
#' }
#'
#' @export
vizGrids <- function(cells, gridSize, ofInterest = NULL,
pointSize = 1, alpha = 0.5){
## shuffling grid
grid <- sf::st_make_grid(cells, cellsize = gridSize)
## get the coordinates of the centers of the grid tiles to add the tile IDs
grid_coords_centroids <- as.data.frame(sf::st_coordinates(sf::st_centroid(grid)))
grid_coords_centroids$name <- as.character(rownames(grid_coords_centroids))
## create plot
crawdad::vizClusters(cells = cells, ofInterest,
pointSize, alpha) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids,
ggplot2::aes(X, Y, label = name)) +
ggplot2::guides(color = "none") +
ggplot2::theme_minimal(axis.line = ggplot2::element_blank(),       # Remove axis lines
axis.text = ggplot2::element_blank(),       # Remove axis text
axis.ticks = ggplot2::element_blank(),      # Remove axis ticks
axis.title = ggplot2::element_blank(),      # Remove axis titles
panel.background = ggplot2::element_blank(), # Remove panel background,
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.border = ggplot2::element_rect(color = "black", linewidth = 1, fill = NA))
}
library(crawdad)
## load the spleen data of the pkhl sample
data('pkhl')
## convert dataframe to spatial points (SP)
cells <- crawdad::toSF(pos = pkhl[,c("x", "y")], celltypes = pkhl$celltypes)
## plot
vizGrids(cells, gridSize = 500)
vizGrids <- function(cells, gridSize, ofInterest = NULL,
pointSize = 1, alpha = 0.5){
## shuffling grid
grid <- sf::st_make_grid(cells, cellsize = gridSize)
## get the coordinates of the centers of the grid tiles to add the tile IDs
grid_coords_centroids <- as.data.frame(sf::st_coordinates(sf::st_centroid(grid)))
grid_coords_centroids$name <- as.character(rownames(grid_coords_centroids))
## create plot
crawdad::vizClusters(cells = cells, ofInterest,
pointSize, alpha) +
## add in the grid information on top of the plot
ggplot2::geom_sf(data = grid, fill = NA) +
ggplot2::geom_text(data = grid_coords_centroids,
ggplot2::aes(X, Y, label = name)) +
ggplot2::guides(color = "none") +
ggplot2::theme(axis.line = ggplot2::element_blank(),       # Remove axis lines
axis.text = ggplot2::element_blank(),       # Remove axis text
axis.ticks = ggplot2::element_blank(),      # Remove axis ticks
axis.title = ggplot2::element_blank(),      # Remove axis titles
panel.background = ggplot2::element_blank(), # Remove panel background,
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
panel.border = ggplot2::element_rect(color = "black", linewidth = 1, fill = NA))
}
## plot
vizGrids(cells, gridSize = 500)
